/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.una.simulador;

import java.awt.event.KeyEvent;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Marcos
 */
public class Simulador extends javax.swing.JFrame {

    //Vetor para coletar o Memory Trace de primeira
    private String[] memoryTrace;
    //Vetor para coletar o Memory Trace depois da conversão
    private Integer[] mT;
    //Vetor para de objetos da Classe NumeroBinario
    private NumeroBinario[] binario;
    //Vetor de blocos de memória
    private Bloco[] blocos, compartimento, aux;
    //Variáveis para captura de dados do usuário
    private static Integer tempoRam, tempoCache, quantBlocos, quantPalavra, endMemoria, grauAssociatividade;
    //Variáveis para captura de dados do cliente
    private String tipoMemCache, politicaSubs;
    //Vetor responsável pela lógica Associativa por Conjunto
    private AssociativaPorConjunto[] ac;

    /**
     * Construtor, chama o método para criar o Form
     */
    public Simulador() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        tiposMemoriaCache = new javax.swing.ButtonGroup();
        politicaDeSubstituicao = new javax.swing.ButtonGroup();
        frameMemoryTrace = new javax.swing.JFrame();
        scrollMemoryTrace = new javax.swing.JScrollPane();
        editorMemoryTrace = new javax.swing.JEditorPane();
        labelMemoryTrace = new javax.swing.JLabel();
        botaoGravarMT = new javax.swing.JButton();
        sobre = new javax.swing.JDialog();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        popAC = new javax.swing.JDialog();
        jLabel11 = new javax.swing.JLabel();
        comboGrauAss = new javax.swing.JComboBox();
        buttonOk = new javax.swing.JButton();
        panelConfig = new javax.swing.JPanel();
        comboBlocos = new javax.swing.JComboBox();
        comboPalavra = new javax.swing.JComboBox();
        radioTipoMD = new javax.swing.JRadioButton();
        radioTipoAC = new javax.swing.JRadioButton();
        radioTipoTA = new javax.swing.JRadioButton();
        labelTipo = new javax.swing.JLabel();
        labelBloco = new javax.swing.JLabel();
        labelPalavra = new javax.swing.JLabel();
        sliderTempoRam = new javax.swing.JSlider();
        sliderTempoCache = new javax.swing.JSlider();
        labelTempoRam = new javax.swing.JLabel();
        labelTempoCache = new javax.swing.JLabel();
        labelTempoRam1 = new javax.swing.JLabel();
        labelTempoCache1 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        radioSubsFIFO = new javax.swing.JRadioButton();
        radioSubsLRU = new javax.swing.JRadioButton();
        panelCommit = new javax.swing.JPanel();
        botaoExecutar = new javax.swing.JButton();
        botaoCancelar = new javax.swing.JButton();
        botaoExportar = new javax.swing.JButton();
        botaoMT = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        scrollStatus = new javax.swing.JScrollPane();
        textStatus = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        textStatus2 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        frameMemoryTrace.setTitle("Memory Trace");
        frameMemoryTrace.setLocationByPlatform(true);
        frameMemoryTrace.setMinimumSize(new java.awt.Dimension(350, 260));
        frameMemoryTrace.setName("frameMemoryTrace"); // NOI18N
        frameMemoryTrace.setPreferredSize(new java.awt.Dimension(350, 260));

        editorMemoryTrace.setContentType("memory trace"); // NOI18N
        editorMemoryTrace.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                editorMemoryTraceKeyTyped(evt);
            }
        });
        scrollMemoryTrace.setViewportView(editorMemoryTrace);

        labelMemoryTrace.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelMemoryTrace.setText("<html>\nPreencha com as palavras que serão executadas pelo CPU<br>\nseparando cada uma por \",\" (vírgula).\n</html>");

        botaoGravarMT.setText("Gravar");
        botaoGravarMT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoGravarMTActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout frameMemoryTraceLayout = new javax.swing.GroupLayout(frameMemoryTrace.getContentPane());
        frameMemoryTrace.getContentPane().setLayout(frameMemoryTraceLayout);
        frameMemoryTraceLayout.setHorizontalGroup(
            frameMemoryTraceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frameMemoryTraceLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frameMemoryTraceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(frameMemoryTraceLayout.createSequentialGroup()
                        .addComponent(scrollMemoryTrace)
                        .addContainerGap())
                    .addGroup(frameMemoryTraceLayout.createSequentialGroup()
                        .addComponent(labelMemoryTrace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 59, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, frameMemoryTraceLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(botaoGravarMT)
                .addGap(140, 140, 140))
        );
        frameMemoryTraceLayout.setVerticalGroup(
            frameMemoryTraceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, frameMemoryTraceLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelMemoryTrace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollMemoryTrace, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(botaoGravarMT)
                .addGap(4, 4, 4))
        );

        frameMemoryTrace.getAccessibleContext().setAccessibleDescription("");
        frameMemoryTrace.getAccessibleContext().setAccessibleParent(this);

        sobre.setLocationByPlatform(true);
        sobre.setMinimumSize(new java.awt.Dimension(400, 300));
        sobre.setResizable(false);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Sobre:");

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(10);
        jTextArea1.setRows(5);
        jTextArea1.setText("Trabalho do curso de Arquitetura de Computadores \nque simula o funcionamento \ndo processamento de algumas instruções pelo \nprocessador utiliando a memória cache.");
        jTextArea1.setBorder(null);
        jTextArea1.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextArea1.setEnabled(false);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Curso: Engenharia de Computação");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("1/2016");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("Criadores/Alunos:");

        jLabel8.setText("Marcos Pereira Benevides");

        jLabel9.setText("Mike de Oliveira Frade");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText("GitHub:");

        jTextField1.setEditable(false);
        jTextField1.setText("https://github.com/marcosbenevides/Simulador_Mem_Cache");

        javax.swing.GroupLayout sobreLayout = new javax.swing.GroupLayout(sobre.getContentPane());
        sobre.getContentPane().setLayout(sobreLayout);
        sobreLayout.setHorizontalGroup(
            sobreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sobreLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sobreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sobreLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane1))
                    .addGroup(sobreLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE))
                    .addGroup(sobreLayout.createSequentialGroup()
                        .addGroup(sobreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(sobreLayout.createSequentialGroup()
                                .addGroup(sobreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel9))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        sobreLayout.setVerticalGroup(
            sobreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sobreLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(sobreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(sobreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        popAC.setTitle("Associativa por conjunto");
        popAC.setLocationByPlatform(true);
        popAC.setMaximumSize(new java.awt.Dimension(200, 100));
        popAC.setMinimumSize(new java.awt.Dimension(200, 100));
        popAC.setPreferredSize(new java.awt.Dimension(200, 100));
        popAC.setType(java.awt.Window.Type.POPUP);
        popAC.getContentPane().setLayout(new java.awt.GridLayout(3, 0));

        jLabel11.setText("Grau de Associatividade");
        popAC.getContentPane().add(jLabel11);

        comboGrauAss.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "4", "8", "16", "32", "64", "128" }));
        popAC.getContentPane().add(comboGrauAss);

        buttonOk.setText("Confirma");
        buttonOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOkActionPerformed(evt);
            }
        });
        popAC.getContentPane().add(buttonOk);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Simulador Memória Cache");
        setLocationByPlatform(true);
        setMaximumSize(new java.awt.Dimension(625, 500));
        setMinimumSize(new java.awt.Dimension(625, 500));
        setName("simuFrame"); // NOI18N
        setPreferredSize(new java.awt.Dimension(625, 500));
        setResizable(false);

        panelConfig.setBackground(getBackground());

        comboBlocos.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "4", "8", "16", "32", "64", "128" }));

        comboPalavra.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "4", "8" }));

        tiposMemoriaCache.add(radioTipoMD);
        radioTipoMD.setText("MD");
        radioTipoMD.setActionCommand("MD");
        radioTipoMD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioTipoMDActionPerformed(evt);
            }
        });

        tiposMemoriaCache.add(radioTipoAC);
        radioTipoAC.setText("AC");
        radioTipoMD.setActionCommand("AC");
        radioTipoAC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioTipoACActionPerformed(evt);
            }
        });

        tiposMemoriaCache.add(radioTipoTA);
        radioTipoTA.setText("TA");
        radioTipoMD.setActionCommand("TA");
        radioTipoTA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioTipoTAActionPerformed(evt);
            }
        });

        labelTipo.setBackground(new java.awt.Color(255, 255, 255));
        labelTipo.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelTipo.setText("Tipo de Memória Cache");

        labelBloco.setBackground(new java.awt.Color(255, 255, 255));
        labelBloco.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelBloco.setText("Quantidade de Blocos");

        labelPalavra.setBackground(new java.awt.Color(255, 255, 255));
        labelPalavra.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelPalavra.setText("Tamanho do Bloco");

        sliderTempoRam.setBackground(getBackground());
        sliderTempoRam.setMajorTickSpacing(1);
        sliderTempoRam.setToolTipText("");
        sliderTempoRam.setValue(0);
        sliderTempoRam.setInheritsPopupMenu(true);

        sliderTempoCache.setBackground(getBackground());
        sliderTempoCache.setMajorTickSpacing(1);
        sliderTempoCache.setSnapToTicks(true);
        sliderTempoCache.setValue(0);

        labelTempoRam.setBackground(new java.awt.Color(255, 255, 255));
        labelTempoRam.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelTempoRam.setText("Tempo de acesso Memoria Ram:");

        labelTempoCache.setBackground(new java.awt.Color(255, 255, 255));
        labelTempoCache.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelTempoCache.setText("Tempo de acesso Memoria Cache:");

        labelTempoRam1.setBackground(new java.awt.Color(255, 255, 255));
        labelTempoRam1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, sliderTempoRam, org.jdesktop.beansbinding.ELProperty.create("${value}"), labelTempoRam1, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        labelTempoCache1.setBackground(new java.awt.Color(255, 255, 255));
        labelTempoCache1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, sliderTempoCache, org.jdesktop.beansbinding.ELProperty.create("${value}"), labelTempoCache1, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Política de Substituição");

        politicaDeSubstituicao.add(radioSubsFIFO);
        radioSubsFIFO.setText("FIFO");
        radioTipoMD.setActionCommand("FIFO");
        radioSubsFIFO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioSubsFIFOActionPerformed(evt);
            }
        });

        politicaDeSubstituicao.add(radioSubsLRU);
        radioSubsLRU.setText("LRU");
        radioTipoMD.setActionCommand("LRU");
        radioSubsLRU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioSubsLRUActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelConfigLayout = new javax.swing.GroupLayout(panelConfig);
        panelConfig.setLayout(panelConfigLayout);
        panelConfigLayout.setHorizontalGroup(
            panelConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelConfigLayout.createSequentialGroup()
                .addGroup(panelConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelConfigLayout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addGroup(panelConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(labelTempoRam)
                            .addGroup(panelConfigLayout.createSequentialGroup()
                                .addComponent(radioSubsFIFO)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(radioSubsLRU))
                            .addComponent(jLabel1)
                            .addGroup(panelConfigLayout.createSequentialGroup()
                                .addComponent(radioTipoMD)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(radioTipoAC)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(radioTipoTA))
                            .addComponent(labelTipo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelTempoRam1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelConfigLayout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(sliderTempoRam, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addGroup(panelConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(sliderTempoCache, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelTempoCache)
                    .addComponent(comboPalavra, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelPalavra)
                    .addComponent(comboBlocos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelBloco))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelTempoCache1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(48, Short.MAX_VALUE))
        );
        panelConfigLayout.setVerticalGroup(
            panelConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelConfigLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(panelConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelBloco)
                    .addComponent(labelTipo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioTipoMD)
                    .addComponent(radioTipoAC)
                    .addComponent(radioTipoTA)
                    .addComponent(comboBlocos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelConfigLayout.createSequentialGroup()
                        .addComponent(labelPalavra)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboPalavra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelConfigLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(radioSubsFIFO)
                            .addComponent(radioSubsLRU))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labelTempoRam)
                    .addGroup(panelConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labelTempoRam1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelTempoCache)
                        .addComponent(labelTempoCache1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sliderTempoRam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sliderTempoCache, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelCommit.setBackground(getBackground());

        botaoExecutar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/play.png"))); // NOI18N
        botaoExecutar.setText("Executar");
        botaoExecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoExecutarActionPerformed(evt);
            }
        });

        botaoCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/eraser.png"))); // NOI18N
        botaoCancelar.setText("Limpar");
        botaoCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoCancelarActionPerformed(evt);
            }
        });

        botaoExportar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/export.png"))); // NOI18N
        botaoExportar.setText("Exportar para txt");
        botaoExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoExportarActionPerformed(evt);
            }
        });

        botaoMT.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/file.png"))); // NOI18N
        botaoMT.setText("Preencher Memory Trace");
        botaoMT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoMTActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelCommitLayout = new javax.swing.GroupLayout(panelCommit);
        panelCommit.setLayout(panelCommitLayout);
        panelCommitLayout.setHorizontalGroup(
            panelCommitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCommitLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(botaoMT, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(botaoExecutar)
                .addGap(18, 18, 18)
                .addComponent(botaoCancelar)
                .addGap(18, 18, 18)
                .addComponent(botaoExportar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelCommitLayout.setVerticalGroup(
            panelCommitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCommitLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelCommitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(botaoExportar)
                    .addComponent(botaoCancelar)
                    .addComponent(botaoExecutar)
                    .addComponent(botaoMT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
        });

        textStatus.setBackground(new java.awt.Color(0, 0, 0));
        textStatus.setColumns(5);
        textStatus.setFont(new java.awt.Font("Consolas", 1, 10)); // NOI18N
        textStatus.setEditable(false);
        textStatus.setForeground(new java.awt.Color(255, 255, 255));
        textStatus.setLineWrap(true);
        textStatus.setRows(10);
        textStatus.setTabSize(5);
        textStatus.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        textStatus.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        scrollStatus.setViewportView(textStatus);

        jTabbedPane1.addTab("Passo a passo", scrollStatus);

        textStatus2.setEditable(false);
        textStatus2.setBackground(new java.awt.Color(0, 0, 0));
        textStatus2.setColumns(20);
        textStatus2.setFont(new java.awt.Font("Consolas", 1, 10)); // NOI18N
        textStatus2.setForeground(new java.awt.Color(255, 255, 255));
        textStatus2.setLineWrap(true);
        textStatus2.setRows(10);
        textStatus2.setTabSize(5);
        textStatus2.setCaretColor(new java.awt.Color(255, 255, 255));
        jScrollPane2.setViewportView(textStatus2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 601, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Direto", jPanel1);

        jMenu1.setText("Ajuda");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem1.setText("Sobre");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelCommit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelConfig, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 606, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelConfig, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelCommit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1))
        );

        getAccessibleContext().setAccessibleName("Simulador");

        bindingGroup.bind();

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Chama a janela do Memory Trace
     */
    private void botaoMTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoMTActionPerformed
        frameMemoryTrace.setVisible(rootPaneCheckingEnabled);
    }//GEN-LAST:event_botaoMTActionPerformed
    /**
     * Dispensa a janela do Memory Trace
     *
     * @param evt
     */
    private void botaoGravarMTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoGravarMTActionPerformed
        frameMemoryTrace.dispose();
    }//GEN-LAST:event_botaoGravarMTActionPerformed
    /**
     * Captura todos os dados de entrada, mostra na tela de status e começa o
     * tratamento
     *
     * @param evt
     */
    private void botaoExecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoExecutarActionPerformed

        //Captura de dados
        tempoRam = sliderTempoRam.getValue();
        tempoCache = sliderTempoCache.getValue();
        quantBlocos = Integer.parseInt(comboBlocos.getSelectedItem().toString());
        quantPalavra = Integer.parseInt(comboPalavra.getSelectedItem().toString());

        //Mostra na área de Status
        this.atualizarStatus("CONFIGURAÇÃO ESCOLHIDA", true);
        this.atualizarStatus("------------------------------------------------------------------", true);
        this.atualizarStatus("Tipo de Memoria Cache: " + tipoMemCache, true);
        this.atualizarStatus("Tipo de Política de Substituição: " + politicaSubs, true);
        this.atualizarStatus("Tempo de Acesso a Memória Ram: " + tempoRam, true);
        this.atualizarStatus("Tempo de Acesso a Memória Cache: " + tempoCache, true);
        this.atualizarStatus("Quantidade de Blocos: " + quantBlocos, true);
        this.atualizarStatus("Tamanho do Bloco: " + quantPalavra, true);
        this.atualizarStatus("Grau de associatividade: " + grauAssociatividade, true);
        this.atualizarStatus("------------------------------------------------------------------", true);
        this.atualizarStatus("MEMORY TRACE DIGITADO:", true);
        tratarMemorytrace(editorMemoryTrace.getText());
        this.atualizarStatus("\n------------------------------------------------------------------", true);

        //Com os dados capturados chama método para criação do vetor de objetos
        criarNumBin();

        //Mostra na área de status as informações das palavras do MT
        for (NumeroBinario binario1 : binario) {
            this.atualizarStatus(binario1.toString(), true);
        }

        //cria os blocos de memória
        criarMemoriaCache();

        //Mostra na área de status as informações sobre os blocos criados
        if (tipoMemCache.equalsIgnoreCase("AC")) {
            for (AssociativaPorConjunto ac1 : ac) {
                atualizarStatus(ac1.toString(), false);
                for (Bloco bloco : ac1.bloco) {
                    this.atualizarStatus(bloco.toString(), false);
                }
            }
        } else {
            for (Bloco bloco : blocos) {
                this.atualizarStatus(bloco.toString(), false);
            }
        }

        //Começa a manipulação dos dados e leitura do MT para inserção nos blocos
        iniciarLeitura();
    }//GEN-LAST:event_botaoExecutarActionPerformed

    /**
     * Até a linha 496 são métodos para capturar o valor de cada botão de Rádio
     *
     * @param evt
     */
    private void radioTipoMDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioTipoMDActionPerformed
        tipoMemCache = "MD";

        politicaSubs = "MD";

        radioSubsFIFO.setEnabled(false);
        radioSubsLRU.setEnabled(false);
    }//GEN-LAST:event_radioTipoMDActionPerformed

    private void radioTipoACActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioTipoACActionPerformed
        tipoMemCache = "AC";

        popAC.setVisible(true);

        radioSubsFIFO.setEnabled(true);
        radioSubsLRU.setEnabled(true);
    }//GEN-LAST:event_radioTipoACActionPerformed

    private void radioTipoTAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioTipoTAActionPerformed
        tipoMemCache = "TA";
        radioSubsFIFO.setEnabled(true);
        radioSubsLRU.setEnabled(true);
    }//GEN-LAST:event_radioTipoTAActionPerformed

    private void radioSubsFIFOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioSubsFIFOActionPerformed
        politicaSubs = "FIFO";
    }//GEN-LAST:event_radioSubsFIFOActionPerformed

    private void radioSubsLRUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioSubsLRUActionPerformed
        politicaSubs = "LRU";
    }//GEN-LAST:event_radioSubsLRUActionPerformed

    private void botaoCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoCancelarActionPerformed
        limpar();
    }//GEN-LAST:event_botaoCancelarActionPerformed

    private void botaoExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoExportarActionPerformed

        try {
            exportarTxt();
        } catch (IOException ex) {
            Logger.getLogger(Simulador.class.getName()).log(Level.SEVERE, null, ex);
            this.atualizarStatus("Erro ao exportar arquivo.", false);

        }

    }//GEN-LAST:event_botaoExportarActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        sobre.setVisible(rootPaneCheckingEnabled);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void buttonOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOkActionPerformed
        grauAssociatividade = Integer.parseInt(comboGrauAss.getSelectedItem().toString());
        popAC.dispose();
    }//GEN-LAST:event_buttonOkActionPerformed

    private void editorMemoryTraceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_editorMemoryTraceKeyTyped

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            frameMemoryTrace.setVisible(false);
        }

    }//GEN-LAST:event_editorMemoryTraceKeyTyped

    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
        System.err.println(jTabbedPane1.getSelectedIndex());
    }//GEN-LAST:event_jTabbedPane1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Simulador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Simulador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Simulador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Simulador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Simulador().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoCancelar;
    private javax.swing.JButton botaoExecutar;
    private javax.swing.JButton botaoExportar;
    private javax.swing.JButton botaoGravarMT;
    private javax.swing.JButton botaoMT;
    private javax.swing.JButton buttonOk;
    private javax.swing.JComboBox comboBlocos;
    private javax.swing.JComboBox comboGrauAss;
    private javax.swing.JComboBox comboPalavra;
    private javax.swing.JEditorPane editorMemoryTrace;
    private javax.swing.JFrame frameMemoryTrace;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel labelBloco;
    private javax.swing.JLabel labelMemoryTrace;
    private javax.swing.JLabel labelPalavra;
    private javax.swing.JLabel labelTempoCache;
    private javax.swing.JLabel labelTempoCache1;
    private javax.swing.JLabel labelTempoRam;
    private javax.swing.JLabel labelTempoRam1;
    private javax.swing.JLabel labelTipo;
    private javax.swing.JPanel panelCommit;
    private javax.swing.JPanel panelConfig;
    private javax.swing.ButtonGroup politicaDeSubstituicao;
    private javax.swing.JDialog popAC;
    private javax.swing.JRadioButton radioSubsFIFO;
    private javax.swing.JRadioButton radioSubsLRU;
    private javax.swing.JRadioButton radioTipoAC;
    private javax.swing.JRadioButton radioTipoMD;
    private javax.swing.JRadioButton radioTipoTA;
    private javax.swing.JScrollPane scrollMemoryTrace;
    private javax.swing.JScrollPane scrollStatus;
    private javax.swing.JSlider sliderTempoCache;
    private javax.swing.JSlider sliderTempoRam;
    private javax.swing.JDialog sobre;
    private javax.swing.JTextArea textStatus;
    private javax.swing.JTextArea textStatus2;
    private javax.swing.ButtonGroup tiposMemoriaCache;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    /**
     * Método para limpar a área de Status
     */
    private void limpar() {
        this.textStatus.setText("");
    }

    /**
     * Método para atualizar texto da área de Status
     *
     * @param texto
     * @param direto
     */
    public void atualizarStatus(String texto, boolean direto) {
        this.textStatus.append(texto + "\n");
        if (direto) {
            this.textStatus2.append(texto + "\n");
        }
    }

    /**
     * Recebe uma String e faz o tratamento colocando no vetor de String logo
     * depois em um vetor de Inteiros. Faz a captura de Exception caso tenha
     * algum valor no MT que não seja válido.
     *
     * @param texto
     */
    public void tratarMemorytrace(String texto) {

        memoryTrace = texto.split(",");
        mT = new Integer[memoryTrace.length];
        try {
            for (int i = 0; i < memoryTrace.length; i++) {

                this.textStatus.append("[" + memoryTrace[i] + "] ");

                mT[i] = Integer.parseInt(memoryTrace[i]);

            }
        } catch (NumberFormatException ex) {
            this.atualizarStatus("\nATENÇÃO!\nForam digitados números "
                    + "inválidos no Memory Trace, favor reiniciar a aplicação!", false);
        }
    }

    /**
     * Captura o valor em cada posição do vetor de inteiros e cria o vetor de
     * objetos
     */
    private void criarNumBin() {
        binario = new NumeroBinario[mT.length];
        for (int i = 0; i < mT.length; i++) {
            binario[i] = new NumeroBinario(mT[i], quantBlocos, quantPalavra, maior());
        }

    }

    /**
     * Determina qual o maior número no vetor para se calcular a quantidade de
     * bits de cada palavra
     *
     * @return
     */
    private int maior() {
        Integer maior = mT[0];
        for (Integer mT1 : mT) {
            if (mT1 > maior) {
                maior = mT1;
            }
        }
        return maior;
    }

    private void criarMemoriaCache() {
        if (tipoMemCache.equalsIgnoreCase("AC")) {
            ac = new AssociativaPorConjunto[grauAssociatividade];
            for (int i = 0; i < ac.length; i++) {
                ac[i] = new AssociativaPorConjunto(quantBlocos);
                for (int j = 0; j < ac[i].bloco.length; j++) {
                    ac[i].bloco[j] = new Bloco(mT.length, tipoMemCache, politicaSubs, quantPalavra, quantBlocos);
                }
            }
        } else {
            blocos = new Bloco[quantBlocos];
            for (int i = 0; i < blocos.length; i++) {
                blocos[i] = new Bloco(mT.length, tipoMemCache, politicaSubs, quantPalavra, quantBlocos);
            }
        }
    }

    private void iniciarLeitura() {
        this.atualizarStatus("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nAtualização de cache\n", false);
        if (null != tipoMemCache) {
            switch (tipoMemCache) {
                case "MD":
                    for (NumeroBinario binario1 : binario) {
                        endMemoria = (Integer.parseInt(binario1.getNumMap(), 2));
                        blocos[endMemoria].setHistorico(binario1.getNumBin(), binario1.getPalavras(), politicaSubs, blocos);
                        this.atualizarStatus("Binário: " + binario1.getNumBin() + "\tMapeamento: " + binario1.getNumMap(), false);
                        this.atualizarStatus(blocos[endMemoria].toString(), false);
                    }
                    break;
                case "TA":
                    for (int i = 0; i < mT.length; i++) {
                        int a = i + 1;
                        blocos[validaControleBloco()].setHistorico(binario[i].getNumBin(), binario[i].getPalavras(), politicaSubs, blocos);
                        this.atualizarStatus("Binário: " + binario[i].getNumBin()
                                + "\tMapeamento: " + binario[i].getNumMap(), false);
                        this.atualizarStatus(blocos[validaControleBloco()].toString(), false);
                        if ("LRU".equals(politicaSubs)) {
                            Bloco.setListaLRU(binario[i].getNumBin(), binario[i].getPalavras());
                            this.atualizarStatus("Lista LRU:\n" + Bloco.getListaLRU()
                                    + "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", false);
                        } else {
                        }
                        blocos[0].setControleBloco();
                    }
                    break;
                case "AC":
                    for (int i = 0; i < binario.length; i++) {
                        endMemoria = (Integer.parseInt(binario[i].getNumMap(), 2));
                        ac[endMemoria].bloco[validaControleBloco()].setHistorico(binario[i].getNumBin(), binario[i].getPalavras(), politicaSubs, ac[endMemoria].bloco);
                        this.atualizarStatus("Binário: " + binario[i].getNumBin()
                                + "\tMapeamento: " + binario[i].getNumMap(), false);
                        this.atualizarStatus(ac[endMemoria].bloco[validaControleBloco()].toString(), false);
                        if ("LRU".equals(politicaSubs)) {
                            Bloco.setListaLRU(binario[i].getNumBin(), binario[i].getPalavras());
                            this.atualizarStatus("Lista LRU:\n" + Bloco.getListaLRU()
                                    + "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", false);
                        } else {
                        }
                        ac[endMemoria].bloco[0].setControleBloco();
                    }

                    break;
            }
        }
        if (tipoMemCache.equalsIgnoreCase("AC")) {
            aux = ac[endMemoria].bloco;
        } else {
            aux = blocos;
        }
        this.atualizarStatus("\n\n" + aux[0].toString2(), true);
        this.atualizarStatus("SpeedUP: " + Bloco.getTempoMedio(tempoCache, tempoRam), true);
    }

    private Integer validaControleBloco() {
        if (tipoMemCache.equalsIgnoreCase("AC")) {
            if (ac[endMemoria].bloco[0].getControleBloco() < ac[endMemoria].bloco.length) {
                return ac[endMemoria].bloco[0].getControleBloco();
            } else {
                ac[endMemoria].bloco[0].setControleBloco(0);
                return ac[endMemoria].bloco[0].getControleBloco();
            }
        } else {
            if (blocos[0].getControleBloco() < blocos.length) {
                return blocos[0].getControleBloco();
            } else {
                blocos[0].setControleBloco(0);
                return blocos[0].getControleBloco();
            }
        }
    }

    private void exportarTxt() throws IOException {
        String line = System.getProperty("line.separator");
        String data = new SimpleDateFormat("dd-MM-yyyy hh-mm-ss").format(new Date(System.currentTimeMillis()));
        FileWriter arquivo = new FileWriter(System.getProperty("user.dir") + "\\Exporta" + data + ".txt");
        PrintWriter gravarArquivo = new PrintWriter(arquivo);
        if (jTabbedPane1.getSelectedIndex() == 0) {
            gravarArquivo.print(textStatus.getText().replaceAll("(\r\n|\n)", line));
        } else {
            gravarArquivo.print(textStatus2.getText().replaceAll("(\r\n|\n)", line));
        }
        arquivo.close();

        this.atualizarStatus("Arquivo salvo com sucesso!", true);
        Runtime.getRuntime().exec("explorer " + System.getProperty("user.dir"));

    }

}
